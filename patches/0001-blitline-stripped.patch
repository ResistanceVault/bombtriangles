From dcbba4bfec23f292784122f71a0a97c08d5a0068 Mon Sep 17 00:00:00 2001
From: Ozzyboshi <gun101@email.it>
Date: Sun, 14 Aug 2022 14:57:08 +0200
Subject: [PATCH] blitline stripped

---
 libs/blitter/lines.s | 122 -------------------------------------------
 1 file changed, 122 deletions(-)

diff --git a/libs/blitter/lines.s b/libs/blitter/lines.s
index 75d829e..d22af4c 100644
--- a/libs/blitter/lines.s
+++ b/libs/blitter/lines.s
@@ -293,128 +293,6 @@ InitLine:
           move.w         #40,$66(a5)                         ; BLTDMOD = 40
           rts
 
-;******************************************************************************
-; Questa routine effettua il disegno della linea. prende come parametri gli
-; estremi della linea P1 e P2, e l'indirizzo del bitplane su cui disegnarla.
-; D0 - X1 (coord. X di P1)
-; D1 - Y1 (coord. Y di P1)
-; D2 - X2 (coord. X di P2)
-; D3 - Y2 (coord. Y di P2)
-; A0 - indirizzo bitplane
-;******************************************************************************
-
-;           ("`-/")_.-'"``-._
-;            . . `; -._    )-;-,_`)
-;       FL  (v_,)'  _  )`-.\  ``-'
-;          _.- _..-_/ / ((.'
-;        ((,.-'   ((,/
-
-Drawline:
-
-* scelta ottante
-
-          sub.w          d0,d2                               ; D2=X2-X1
-          bmi.s          DRAW4                               ; se negativo salta, altrimenti D2=DiffX
-          sub.w          d1,d3                               ; D3=Y2-Y1
-          bmi.s          DRAW2                               ; se negativo salta, altrimenti D3=DiffY
-          cmp.w          d3,d2                               ; confronta DiffX e DiffY
-          bmi.s          DRAW1                               ; se D2<D3 salta..
-                                ; .. altrimenti D3=DY e D2=DX
-          moveq          #$10,d5                             ; codice ottante
-          bra.s          DRAWL
-DRAW1:
-          exg.l          d2,d3                               ; scambia D2 e D3, in modo che D3=DY e D2=DX
-          moveq          #0,d5                               ; codice ottante
-          bra.s          DRAWL
-DRAW2:
-          neg.w          d3                                  ; rende D3 positivo
-          cmp.w          d3,d2                               ; confronta DiffX e DiffY
-          bmi.s          DRAW3                               ; se D2<D3 salta..
-                                ; .. altrimenti D3=DY e D2=DX
-          moveq          #$18,d5                             ; codice ottante
-          bra.s          DRAWL
-DRAW3:
-          exg.l          d2,d3                               ; scambia D2 e D3, in modo che D3=DY e D2=DX
-          moveq          #$04,d5                             ; codice ottante
-          bra.s          DRAWL
-DRAW4:
-          neg.w          d2                                  ; rende D2 positivo
-          sub.w          d1,d3                               ; D3=Y2-Y1
-          bmi.s          DRAW6                               ; se negativo salta, altrimenti D3=DiffY
-          cmp.w          d3,d2                               ; confronta DiffX e DiffY
-          bmi.s          DRAW5                               ; se D2<D3 salta..
-                                ; .. altrimenti D3=DY e D2=DX
-          moveq          #$14,d5                             ; codice ottante
-          bra.s          DRAWL
-DRAW5:
-          exg.l          d2,d3                               ; scambia D2 e D3, in modo che D3=DY e D2=DX
-          moveq          #$08,d5                             ; codice ottante
-          bra.s          DRAWL
-DRAW6:
-          neg.w          d3                                  ; rende D3 positivo
-          cmp.w          d3,d2                               ; confronta DiffX e DiffY
-          bmi.s          DRAW7                               ; se D2<D3 salta..
-                                ; .. altrimenti D3=DY e D2=DX
-          moveq          #$1c,d5                             ; codice ottante
-          bra.s          DRAWL
-DRAW7:
-          exg.l          d2,d3                               ; scambia D2 e D3, in modo che D3=DY e D2=DX
-          moveq          #$0c,d5                             ; codice ottante
-
-; Quando l'esecuzione raggiunge questo punto, abbiamo:
-; D2 = DX
-; D3 = DY
-; D5 = codice ottante
-
-DRAWL:
-          mulu.w         #40,d1                              ; offset Y
-          add.l          d1,a0                               ; aggiunge l'offset Y all'indirizzo
-
-          move.w         d0,d1                               ; copia la coordinata X
-          and.w          #$000F,d0                           ; seleziona i 4 bit piu` bassi della X..
-          ror.w          #4,d0                               ; .. e li sposta nei bit da 12 a 15
-          or.w           #$0B4A,d0                           ; con un OR ottengo il valore da scrivere
-                                ; in BLTCON0. Con questo valore di LF ($4A)
-                                ; si disegnano linee in EOR con lo sfondo.
-
-          lsr.w          #4,d1                               ; cancella i 4 bit bassi della X
-          add.w          d1,d1                               ; ottiene l'offset X in bytes
-          add.w          d1,a0                               ; aggiunge l'offset X all'indirizzo
-
-          move.w         d2,d1                               ; copia DX in D1
-          addq.w         #1,d1                               ; D1=DX+1
-          lsl.w          #$06,d1                             ; calcola in D1 il valore da mettere in BLTSIZE
-          addq.w         #$0002,d1                           ; aggiunge la larghezza, pari a 2 words
-
-          lsl.w          #$02,d3                             ; D3=4*DY
-          add.w          d2,d2                               ; D2=2*DX
-
-          btst           #6,2(a5)
-WaitLine:
-          btst           #6,2(a5)                            ; aspetta blitter fermo
-          bne            WaitLine
-
-          move.w         d3,$62(a5)                          ; BLTBMOD=4*DY
-          sub.w          d2,d3                               ; D3=4*DY-2*DX
-          move.w         d3,$52(a5)                          ; BLTAPTL=4*DY-2*DX
-
-                                ; prepara valore da scrivere in BLTCON1
-          or.w           #$0001,d5                           ; setta bit 0 (attiva line-mode)
-          tst.w          d3
-          bpl.s          OK1                                 ; se 4*DY-2*DX>0 salta..
-          or.w           #$0040,d5                           ; altrimenti setta il bit SIGN
-OK1:
-          move.w         d0,$40(a5)                          ; BLTCON0
-          move.w         d5,$42(a5)                          ; BLTCON1
-          sub.w          d2,d3                               ; D3=4*DY-4*DX
-          move.w         d3,$64(a5)                          ; BLTAMOD=4*DY-4*DX
-          move.l         a0,$48(a5)                          ; BLTCPT - indirizzo schermo
-          move.l         a0,$54(a5)                          ; BLTDPT - indirizzo schermo
-          move.w         d1,$58(a5)                          ; BLTSIZE                                             ; BLTSIZE
-
-          rts
-
-
   IFD EXTRA_BLIT_ALGOS
 
 *******************************************************************************
-- 
2.30.2

